{"version":3,"sources":["shortcuts.js"],"names":["define","langx","datax","eventer","keyCodeLookup","shortcuts","elm","registry","data","run","shortcut","event","n","metaKey","ctrlKey","ctrl","alt","altKey","shift","shiftKey","keyCode","charCode","preventDefault","type","fn","on","test","target","nodeName","key","add","pattern","indexOf","toLowerCase","split","forEach","shortcutKey","setting","charCodeAt","toUpperCase","regKey"],"mappings":";;;;;;;AAAAA,QACC,gBACG,oBACH,YACG,UACF,SAASC,EAAMC,EAAMC,EAAQC,GAmE3B,OAAOD,EAAQE,UA/Df,SAAmBC,GAEf,IAAIC,EAAWL,EAAMM,KAAKF,EAAK,aAC/B,IAAKC,EAAU,CACXA,KACAL,EAAMM,KAAKF,EAAK,YAAaC,GAC7B,IAAIE,EAAM,SAASC,EAAUC,GACzB,IAAIC,EAAID,EAAME,SAAWF,EAAMG,QAC/B,GAAIJ,EAASK,MAAQH,GAAKF,EAASM,KAAOL,EAAMM,QAAUP,EAASQ,OAASP,EAAMQ,WAC1ER,EAAMS,SAAWV,EAASU,SAAWT,EAAMU,UAAYV,EAAMU,UAAYX,EAASW,UAKlF,OAJAV,EAAMW,iBACF,WAAaX,EAAMY,MACnBb,EAASc,GAAGb,IAET,GAInBc,GAAGnB,EAAK,yBAA0B,SAASK,GACvC,IAAM,iBAAiBe,KAAKf,EAAMgB,OAAOC,UACrC,IAAK,IAAIC,KAAOtB,EACZE,EAAIF,EAASsB,GAAMlB,KAOnC,OACImB,IAAK,SAASC,EAASP,IAEfO,EAAQC,QAAQ,MAAQ,EACTD,EAAQE,cAAcC,MAAM,KAE5BH,EAAQE,cAAcC,MAAM,MAElCC,QAAQ,SAASC,GAC1B,IAAIC,GACAb,GAAIA,EACJR,KAAK,EACLD,MAAM,EACNG,OAAO,GAEXkB,EAAYF,MAAM,KAAKC,QAAQ,SAASN,GACpC,OAAQA,GACJ,IAAK,MACL,IAAK,OACL,IAAK,QACDQ,EAAQR,IAAO,EACf,MACJ,QACIQ,EAAQhB,SAAWQ,EAAIS,WAAW,GAClCD,EAAQjB,QAAUhB,EAAcyB,IAAQA,EAAIU,cAAcD,WAAW,MAGjF,IAAIE,GAAUH,EAAQtB,KAAO,OAAS,IAAM,KAAOsB,EAAQrB,IAAM,MAAQ,IAAM,KAAOqB,EAAQnB,MAAQ,QAAU,IAAM,IAAMmB,EAAQjB,QACpIb,EAASiC,GAAUH","file":"../shortcuts.js","sourcesContent":["define([\r\n\t\"skylark-langx\",\r\n    \"skylark-domx-data\",\r\n\t\"./eventer\",\r\n    \"./keys\"\r\n],function(langx,datax,eventer,keyCodeLookup){\r\n\r\n    //example:\r\n    //shortcuts(elm).add(\"CTRL+ALT+SHIFT+X\",function(){console.log(\"test!\")});\r\n    function shortcuts(elm) {\r\n\r\n        var registry = datax.data(elm, \"shortcuts\");\r\n        if (!registry) {\r\n            registry = {};\r\n            datax.data(elm, \"shortcuts\", registry);\r\n            var run = function(shortcut, event) {\r\n                var n = event.metaKey || event.ctrlKey;\r\n                if (shortcut.ctrl == n && shortcut.alt == event.altKey && shortcut.shift == event.shiftKey) {\r\n                    if (event.keyCode == shortcut.keyCode || event.charCode && event.charCode == shortcut.charCode) {\r\n                        event.preventDefault();\r\n                        if (\"keydown\" == event.type) {\r\n                            shortcut.fn(event);\r\n                        }\r\n                        return true;\r\n                    }\r\n                }\r\n            };\r\n            on(elm, \"keyup keypress keydown\", function(event) {\r\n                if (!(/INPUT|TEXTAREA/.test(event.target.nodeName))) {\r\n                    for (var key in registry) {\r\n                        run(registry[key], event);\r\n                    }\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n        return {\r\n            add: function(pattern, fn) {\r\n                var shortcutKeys;\r\n                if (pattern.indexOf(\",\") > -1) {\r\n                    shortcutKeys = pattern.toLowerCase().split(\",\");\r\n                } else {\r\n                    shortcutKeys = pattern.toLowerCase().split(\" \");\r\n                }\r\n                shortcutKeys.forEach(function(shortcutKey) {\r\n                    var setting = {\r\n                        fn: fn,\r\n                        alt: false,\r\n                        ctrl: false,\r\n                        shift: false\r\n                    };\r\n                    shortcutKey.split(\"+\").forEach(function(key) {\r\n                        switch (key) {\r\n                            case \"alt\":\r\n                            case \"ctrl\":\r\n                            case \"shift\":\r\n                                setting[key] = true;\r\n                                break;\r\n                            default:\r\n                                setting.charCode = key.charCodeAt(0);\r\n                                setting.keyCode = keyCodeLookup[key] || key.toUpperCase().charCodeAt(0);\r\n                        }\r\n                    });\r\n                    var regKey = (setting.ctrl ? \"ctrl\" : \"\") + \",\" + (setting.alt ? \"alt\" : \"\") + \",\" + (setting.shift ? \"shift\" : \"\") + \",\" + setting.keyCode;\r\n                    registry[regKey] = setting;\r\n                })\r\n            }\r\n\r\n        };\r\n\r\n    }\r\n    return eventer.shortcuts = shortcuts;\r\n});"]}