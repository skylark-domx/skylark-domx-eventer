{"version":3,"sources":["off.js"],"names":["define","langx","eventer","findHandler","isHandler","off","elm","events","selector","callback","isPlainObject","each","type","fn","this","isString","undefined","returnFalse","indexOf","split","handler","forEach","event","unregister"],"mappings":";;;;;;;AAAAA,QACC,gBACA,YACG,iBACA,gBACF,SAASC,EAAMC,EAAQC,EAAYC,GA8CjC,OAAOF,EAAQG,IArCf,SAASA,EAAIC,EAAKC,EAAQC,EAAUC,GAEhC,GAAIR,EAAMS,cAAcH,GAIpB,OAHAN,EAAMU,KAAKJ,EAAQ,SAASK,EAAMC,GAC9BR,EAAIC,EAAKM,EAAMJ,EAAUK,KAHrBC,KAQPb,EAAMc,SAASP,IAAcJ,EAAUK,KAA0B,IAAbA,IACrDA,EAAWD,EACXA,OAAWQ,IAGE,IAAbP,IACAA,EAAWR,EAAMgB,aAGA,iBAAVV,IAEHA,EADAA,EAAOW,QAAQ,MAAQ,EACdX,EAAOY,MAAM,KAEbZ,EAAOY,MAAM,OAI9B,IAAIC,EAAUjB,EAAYG,GAQ1B,OANIC,GAAQA,EAAOc,QAAQ,SAASC,GAEhCF,EAAQG,WAAWD,EAAOb,GACtBD,SAAUA,MAGXM","file":"../off.js","sourcesContent":["define([\r\n\t\"skylark-langx\",\r\n\t\"./eventer\",\r\n    \"./find-handler\",\r\n    \"./is-handler\"\r\n],function(langx,eventer,findHandler,isHandler){\r\n\r\n    /*   \r\n     * Remove an event handler for one or more events from the specified element.\r\n     * @param {HTMLElement} elm  \r\n     * @param {String} events\r\n     * @param {Stringã€€Optional } selector\r\n     * @param {Function} callback\r\n     */\r\n    function off(elm, events, selector, callback) {\r\n        var $this = this\r\n        if (langx.isPlainObject(events)) {\r\n            langx.each(events, function(type, fn) {\r\n                off(elm, type, selector, fn);\r\n            })\r\n            return $this;\r\n        }\r\n\r\n        if (!langx.isString(selector) && !isHandler(callback) && callback !== false) {\r\n            callback = selector;\r\n            selector = undefined;\r\n        }\r\n\r\n        if (callback === false) {\r\n            callback = langx.returnFalse;\r\n        }\r\n\r\n        if (typeof events == \"string\") {\r\n            if (events.indexOf(\",\") > -1) {\r\n                events = events.split(\",\");\r\n            } else {\r\n                events = events.split(/\\s/);\r\n            }\r\n        }\r\n\r\n        var handler = findHandler(elm);\r\n\r\n        if (events) events.forEach(function(event) {\r\n\r\n            handler.unregister(event, callback, {\r\n                selector: selector,\r\n            });\r\n        });\r\n        return this;\r\n    }\r\n\r\n    return eventer.off = off;\r\n});"]}