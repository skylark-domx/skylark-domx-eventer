{"version":3,"sources":["events-handler.js"],"names":["define","langx","eventer","EventBindings","specialEvents","parse","EventsHandler","klass","init","elm","this","_target","_handler","register","event","callback","options","parsed","specialEvent","type","bindingEvent","bindType","bindEventName","events","undefined","add","mixin","ns","unregister","fn","listener","remove"],"mappings":";;;;;;;AAAAA,QACC,gBACA,YACG,mBACA,YACA,WACF,SAASC,EAAMC,EAAQC,EAAcC,EAAcC,GACjD,IAAOC,EAAgBL,EAAMM,OACzBC,KAAM,SAASC,GACXC,KAAKC,QAAUF,EACfC,KAAKE,aAKTC,SAAU,SAASC,EAAOC,EAAUC,GAEhC,IAAIC,EAASZ,EAAMS,GAEfI,GADAJ,EAAQG,EAAOE,KACAf,EAAcU,IAC7BM,EAAeF,IAAiBA,EAAaG,UAAYH,EAAaI,eAEtEC,EAASb,KAAKE,cAGIY,IAAlBD,EAAOT,KACPS,EAAOT,GAAS,IAAIX,EAAcO,KAAKC,QAASS,GAAgBN,IAIpES,EAAOT,GAAOW,IAAIV,EAAUd,EAAMyB,OAC9BC,GAAIV,EAAOU,IACZX,KAIPY,WAAY,SAASd,EAAOe,EAAIb,GAE5B,IAAIO,EAASb,KAAKE,SACdK,EAASZ,EAAMS,GAGnB,GAFAA,EAAQG,EAAOE,MAGPW,EAAWP,EAAOT,KAGlBgB,EAASC,OAAOF,EAAI5B,EAAMyB,OACtBC,GAAIV,EAAOU,IACZX,SAIP,IAAKF,KAASS,EAAQ,CAClB,IAAIO,GAAAA,EAAWP,EAAOT,IACbiB,OAAOF,EAAI5B,EAAMyB,OACtBC,GAAIV,EAAOU,IACZX,QAOnB,OAAOd,EAAQI,cAAgBA","file":"../events-handler.js","sourcesContent":["define([\r\n\t\"skylark-langx\",\r\n\t\"./eventer\",\r\n    \"./event-bindings\",\r\n    \"./special\",\r\n    \"./parse\"\r\n],function(langx,eventer,EventBindings,specialEvents,parse){\r\n    var    EventsHandler = langx.klass({\r\n        init: function(elm) {\r\n            this._target = elm;\r\n            this._handler = {};\r\n        },\r\n\r\n        // add a event listener\r\n        // selector Optional\r\n        register: function(event, callback, options) {\r\n            // Seperate the event from the namespace\r\n            var parsed = parse(event),\r\n                event = parsed.type,\r\n                specialEvent = specialEvents[event],\r\n                bindingEvent = specialEvent && (specialEvent.bindType || specialEvent.bindEventName);\r\n\r\n            var events = this._handler;\r\n\r\n            // Check if there is already a handler for this event\r\n            if (events[event] === undefined) {\r\n                events[event] = new EventBindings(this._target, bindingEvent || event);\r\n            }\r\n\r\n            // Register the new callback function\r\n            events[event].add(callback, langx.mixin({\r\n                ns: parsed.ns\r\n            }, options)); // options:{selector:xxx}\r\n        },\r\n\r\n        // remove a event listener\r\n        unregister: function(event, fn, options) {\r\n            // Check for parameter validtiy\r\n            var events = this._handler,\r\n                parsed = parse(event);\r\n            event = parsed.type;\r\n\r\n            if (event) {\r\n                var listener = events[event];\r\n\r\n                if (listener) {\r\n                    listener.remove(fn, langx.mixin({\r\n                        ns: parsed.ns\r\n                    }, options));\r\n                }\r\n            } else {\r\n                //remove all events\r\n                for (event in events) {\r\n                    var listener = events[event];\r\n                    listener.remove(fn, langx.mixin({\r\n                        ns: parsed.ns\r\n                    }, options));\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n\r\n    return eventer.EventsHandler = EventsHandler;\r\n});"]}