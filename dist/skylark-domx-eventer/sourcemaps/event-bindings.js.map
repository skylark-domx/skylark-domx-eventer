{"version":3,"sources":["event-bindings.js"],"names":["define","langx","finder","noder","eventer","proxy","focusinSupported","window","focus","blur","hover","mouseenter","mouseleave","realEvent","type","EventBindings","klass","init","target","event","this","_target","_event","_bindings","add","fn","options","bindings","binding","mixin","push","self","_listener","domEvt","elm","e","args","_args","ns","namespace","isDefined","concat","each","idx","match","isImmediatePropagationStopped","selector","one","data","indexOf","closest","currentTarget","liveFired","related","relatedTarget","contains","remove","handleEvent","apply","ctx","preventDefault","stopPropagation","addEventListener","console","warn","matcher","RegExp","replace","filter","test","length","removeEventListener"],"mappings":";;;;;;;AAAAA,QACC,gBACG,sBACA,qBACH,YACG,WACF,SAASC,EAAMC,EAAOC,EAAMC,EAAQC,GAClC,IAAIC,EAAmB,cAAeC,OAClCC,GAAUA,MAAO,UAAWC,KAAM,YAClCC,GAAUC,WAAY,YAAaC,WAAY,YAC/CC,EAAY,SAASC,GACjB,OAAOJ,EAAMI,IAAUR,GAAoBE,EAAMM,IAAUA,GAG5DC,EAAgBd,EAAMe,OACzBC,KAAM,SAASC,EAAQC,GACnBC,KAAKC,QAAUH,EACfE,KAAKE,OAASH,EACdC,KAAKG,cAGTC,IAAK,SAASC,EAAIC,GACd,IAAIC,EAAWP,KAAKG,UAChBK,GACIH,GAAIA,EACJC,QAASzB,EAAM4B,SAAUH,IAGjCC,EAASG,KAAKF,GAEd,IAAIG,EAAOX,KACX,IAAKW,EAAKC,UAAW,CACjBD,EAAKC,UAAY,SAASC,GACtB,IAAIC,EAAMd,KACNe,EAAI9B,EAAM4B,GACVG,EAAOH,EAAOI,MACdV,EAAWI,EAAKR,UAChBe,EAAKH,EAAEI,UAGPH,EADAnC,EAAMuC,UAAUJ,IACRD,GAAGM,OAAOL,IAEVD,GAGZA,EAAErB,KAAOiB,EAAKT,OAEdrB,EAAMyC,KAAKf,EAAU,SAASgB,EAAKf,GAC/B,IAAIgB,EAAQV,EACZ,GAAIC,EAAEU,+BAAiCV,EAAEU,gCACrC,OAAO,EAEX,IAAIpB,EAAKG,EAAQH,GACbC,EAAUE,EAAQF,YAClBoB,EAAWpB,EAAQoB,SACnBC,EAAMrB,EAAQqB,IACdC,EAAOtB,EAAQsB,KAEnB,IAAIV,GAAMA,GAAMZ,EAAQY,KAAkC,IAA5BZ,EAAQY,GAAGW,QAAQX,GAAjD,CAGA,GAAIQ,EAAU,CAEV,KADAF,EAAQ1C,EAAOgD,QAAQf,EAAEjB,OAAQ4B,KACpBF,IAAUV,EAMnB,OALAjC,EAAM4B,MAAMM,GACRgB,cAAeP,EACfQ,UAAWlB,IAQvB,GADoBH,EAAKT,UACJZ,EAAO,CACxB,IAAI2C,EAAUlB,EAAEmB,cAChB,GAAID,IAAYA,IAAYT,GAASzC,EAAMoD,SAASX,EAAOS,IACvD,OAIJpD,EAAMuC,UAAUQ,KAChBb,EAAEa,KAAOA,GAGTD,GACAhB,EAAKyB,OAAO/B,EAAIC,IAcL,KAVXD,EAAGgC,YACMhC,EAAGgC,YAAYC,MAAMjC,EAAGW,GAE7BV,EAAQiC,IACClC,EAAGiC,MAAMhC,EAAQiC,IAAKvB,GAEtBX,EAAGiC,MAAMd,EAAOR,MAK7BD,EAAEyB,iBACFzB,EAAE0B,uBAKd,IAAI1C,EAAQY,EAAKT,OAabS,EAAKV,QAAQyC,iBACb/B,EAAKV,QAAQyC,iBAAiBjD,EAAUM,GAAQY,EAAKC,WAAW,GAEhE+B,QAAQC,KAAK,yBAA0BjC,EAAKV,WAKxDmC,OAAQ,SAAS/B,EAAIC,GAMjB,IAAIuC,EAHgB3B,GAFpBZ,EAAUzB,EAAM4B,SAAUH,IAMdY,KAJQA,EAKKZ,EAAQY,GAA7B2B,EAJO,IAAIC,OAAO,UAAY5B,EAAG6B,QAAQ,IAAK,SAAW,YAO7D/C,KAAKG,UAAYH,KAAKG,UAAU6C,OAAO,SAASxC,GAK5C,UAJiBH,GAAMA,IAAOG,EAAQH,OAChCwC,GAAWA,EAAQI,KAAKzC,EAAQF,QAAQY,QACxCZ,EAAQoB,UAAYpB,EAAQoB,UAAYlB,EAAQF,QAAQoB,aAIrC,GAAzB1B,KAAKG,UAAU+C,SACXlD,KAAKC,QAAQkD,qBACbnD,KAAKC,QAAQkD,oBAAoB1D,EAAUO,KAAKE,QAASF,KAAKY,WAAW,GAE7EZ,KAAKY,UAAY,SAK7B,OAAO5B,EAAQW,cAAgBA","file":"../event-bindings.js","sourcesContent":["define([\r\n\t\"skylark-langx\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-noder\",\r\n\t\"./eventer\",\r\n    \"./proxy\"\r\n],function(langx,finder,noder,eventer,proxy){\r\n    var focusinSupported = \"onfocusin\" in window,\r\n        focus = { focus: \"focusin\", blur: \"focusout\" },\r\n        hover = { mouseenter: \"mouseover\", mouseleave: \"mouseout\" },\r\n        realEvent = function(type) {\r\n            return hover[type] || (focusinSupported && focus[type]) || type;\r\n        };\r\n\r\n    var    EventBindings = langx.klass({\r\n        init: function(target, event) {\r\n            this._target = target;\r\n            this._event = event;\r\n            this._bindings = [];\r\n        },\r\n\r\n        add: function(fn, options) {\r\n            var bindings = this._bindings,\r\n                binding = {\r\n                    fn: fn,\r\n                    options: langx.mixin({}, options)\r\n                };\r\n\r\n            bindings.push(binding);\r\n\r\n            var self = this;\r\n            if (!self._listener) {\r\n                self._listener = function(domEvt) {\r\n                    var elm = this,\r\n                        e = proxy(domEvt),\r\n                        args = domEvt._args,\r\n                        bindings = self._bindings,\r\n                        ns = e.namespace;\r\n\r\n                    if (langx.isDefined(args)) {\r\n                        args = [e].concat(args);\r\n                    } else {\r\n                        args = [e];\r\n                    }\r\n\r\n                    e.type = self._event; // convert realEvent to listened event\r\n\r\n                    langx.each(bindings, function(idx, binding) {\r\n                        var match = elm;\r\n                        if (e.isImmediatePropagationStopped && e.isImmediatePropagationStopped()) {\r\n                            return false;\r\n                        }\r\n                        var fn = binding.fn,\r\n                            options = binding.options || {},\r\n                            selector = options.selector,\r\n                            one = options.one,\r\n                            data = options.data;\r\n\r\n                        if (ns && ns != options.ns && options.ns.indexOf(ns) === -1) {\r\n                            return;\r\n                        }\r\n                        if (selector) {\r\n                            match = finder.closest(e.target, selector);\r\n                            if (match && match !== elm) {\r\n                                langx.mixin(e, {\r\n                                    currentTarget: match,\r\n                                    liveFired: elm\r\n                                });\r\n                            } else {\r\n                                return;\r\n                            }\r\n                        }\r\n\r\n                        var originalEvent = self._event;\r\n                        if (originalEvent in hover) {\r\n                            var related = e.relatedTarget;\r\n                            if (related && (related === match || noder.contains(match, related))) {\r\n                                return;\r\n                            }\r\n                        }\r\n\r\n                        if (langx.isDefined(data)) {\r\n                            e.data = data;\r\n                        }\r\n\r\n                        if (one) {\r\n                            self.remove(fn, options);\r\n                        }\r\n\r\n                        var result ;\r\n                        if (fn.handleEvent) {\r\n                            result = fn.handleEvent.apply(fn,args);\r\n                        } else {\r\n                            if (options.ctx) {\r\n                                result = fn.apply(options.ctx, args);                                   \r\n                            } else {\r\n                                result = fn.apply(match, args);                                   \r\n                            }\r\n                        }\r\n\r\n                        if (result === false) {\r\n                            e.preventDefault();\r\n                            e.stopPropagation();\r\n                        }\r\n                    });;\r\n                };\r\n\r\n                var event = self._event;\r\n                /*\r\n                                    if (event in hover) {\r\n                                        var l = self._listener;\r\n                                        self._listener = function(e) {\r\n                                            var related = e.relatedTarget;\r\n                                            if (!related || (related !== this && !noder.contains(this, related))) {\r\n                                                return l.apply(this, arguments);\r\n                                            }\r\n                                        }\r\n                                    }\r\n                */\r\n\r\n                if (self._target.addEventListener) {\r\n                    self._target.addEventListener(realEvent(event), self._listener, false);\r\n                } else {\r\n                    console.warn(\"invalid eventer object\", self._target);\r\n                }\r\n            }\r\n\r\n        },\r\n        remove: function(fn, options) {\r\n            options = langx.mixin({}, options);\r\n\r\n            function matcherFor(ns) {\r\n                return new RegExp(\"(?:^| )\" + ns.replace(\" \", \" .* ?\") + \"(?: |$)\");\r\n            }\r\n            var matcher;\r\n            if (options.ns) {\r\n                matcher = matcherFor(options.ns);\r\n            }\r\n\r\n            this._bindings = this._bindings.filter(function(binding) {\r\n                var removing = (!fn || fn === binding.fn) &&\r\n                    (!matcher || matcher.test(binding.options.ns)) &&\r\n                    (!options.selector || options.selector == binding.options.selector);\r\n\r\n                return !removing;\r\n            });\r\n            if (this._bindings.length == 0) {\r\n                if (this._target.removeEventListener) {\r\n                    this._target.removeEventListener(realEvent(this._event), this._listener, false);\r\n                }\r\n                this._listener = null;\r\n            }\r\n        }\r\n    });\r\n\r\n    return eventer.EventBindings = EventBindings;\r\n});"]}