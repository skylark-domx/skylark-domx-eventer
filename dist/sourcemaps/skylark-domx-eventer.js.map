{"version":3,"sources":["skylark-domx-eventer.js"],"names":["define","skylark","attach","eventer","langx","eventMethods","preventDefault","stopImmediatePropagation","stopPropagation","compatible","event","source","isDefaultPrevented","each","name","predicate","sourceMethod","this","returnTrue","apply","arguments","returnFalse","ignoreProperties","proxy","src","props","key","originalEvent","test","undefined","mixin","finder","noder","focusinSupported","window","focus","blur","hover","mouseenter","mouseleave","realEvent","type","EventBindings","klass","init","target","_target","_event","_bindings","add","fn","options","bindings","binding","push","self","_listener","domEvt","elm","e","args","_args","ns","namespace","isDefined","concat","idx","match","isImmediatePropagationStopped","selector","one","data","indexOf","closest","currentTarget","liveFired","related","relatedTarget","contains","remove","handleEvent","ctx","addEventListener","console","warn","matcher","RegExp","replace","filter","removing","length","removeEventListener","browser","specialEvents","support","transition","transitionEnd","bindType","end","delegateType","segs","split","slice","sort","join","parse","EventsHandler","_handler","register","callback","parsed","specialEvent","bindingEvent","bindEventName","events","unregister","listener","handlers","findHandler","id","uid","handler","clear","NativeEventCtors","NativeEvents","compositionstart","compositionend","compositionupdate","beforecopy","beforecut","beforepaste","copy","cut","paste","drag","dragend","dragenter","dragexit","dragleave","dragover","dragstart","drop","abort","change","error","selectionchange","submit","reset","fullscreenchange","fullscreenerror","focusin","focusout","keydown","keypress","keyup","message","click","contextmenu","dblclick","mousedown","mouseup","mousemove","mouseover","mouseout","progress","textInput","tap","touchstart","touchmove","touchend","load","resize","select","scroll","unload","wheel","createEvent","isString","bubbles","cancelable","ctor","getEventCtor","safeMixin","create","trigger","evented","Event","dispatchEvent","call","focusedQueue","focuser","loop","i","start","focused","includes","isNativeEvent","isArray","keys","backspace","comma","delete","down","enter","escape","home","left","page_down","page_up","period","right","space","tab","up","isFunction","isHandler","off","isPlainObject","forEach","on","isBoolean","ready","readyRE","document","readyState","body","defer","resizedQueue","resizer","resized","datax","keyCodeLookup","shortcuts","registry","run","shortcut","n","metaKey","ctrlKey","ctrl","alt","altKey","shift","shiftKey","keyCode","charCode","nodeName","pattern","toLowerCase","shortcutKey","setting","charCodeAt","toUpperCase","regKey","stop","all","velm","$","delegateMethodNames","delegate","wraps","wrapper_every_act","main"],"mappings":"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","file":"../skylark-domx-eventer.js","sourcesContent":["define('skylark-domx-eventer/eventer',[\r\n    \"skylark-langx/skylark\"\r\n], function(skylark) {\r\n\r\n\r\n    function eventer() {\r\n        return eventer;\r\n    }\r\n\r\n    return skylark.attach(\"domx.eventer\",eventer);\r\n});\ndefine('skylark-domx-eventer/compatible',[\r\n\t\"skylark-langx\",\r\n\t\"./eventer\"\r\n],function(langx,eventer){\r\n    var eventMethods = {\r\n        preventDefault: \"isDefaultPrevented\",\r\n        stopImmediatePropagation: \"isImmediatePropagationStopped\",\r\n        stopPropagation: \"isPropagationStopped\"\r\n    };\r\n\r\n    function compatible(event, source) {\r\n        if (source || !event.isDefaultPrevented) {\r\n            if (!source) {\r\n                source = event;\r\n            }\r\n\r\n            langx.each(eventMethods, function(name, predicate) {\r\n                var sourceMethod = source[name];\r\n                event[name] = function() {\r\n                    this[predicate] = langx.returnTrue;\r\n                    return sourceMethod && sourceMethod.apply(source, arguments);\r\n                }\r\n                event[predicate] = langx.returnFalse;\r\n            });\r\n        }\r\n        return event;\r\n    }\r\n\r\n\r\n    return eventer.compatible = compatible;\r\n});\ndefine('skylark-domx-eventer/proxy',[\r\n\t\"skylark-langx\",\r\n\t\"./eventer\",\r\n    \"./compatible\"\r\n],function(langx,eventer,compatible){\r\n    var  ignoreProperties = /^([A-Z]|returnValue$|layer[XY]$)/;\r\n\r\n    function createProxy(src, props) {\r\n        var key,\r\n            proxy = {\r\n                originalEvent: src\r\n            };\r\n        for (key in src) {\r\n            if (key !== \"keyIdentifier\" && !ignoreProperties.test(key) && src[key] !== undefined) {\r\n                proxy[key] = src[key];\r\n            }\r\n        }\r\n        if (props) {\r\n            langx.mixin(proxy, props);\r\n        }\r\n        return compatible(proxy, src);\r\n    }\r\n\r\n    return eventer.proxy = createProxy;\r\n});\ndefine('skylark-domx-eventer/event-bindings',[\r\n\t\"skylark-langx\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-noder\",\r\n\t\"./eventer\",\r\n    \"./proxy\"\r\n],function(langx,finder,noder,eventer,proxy){\r\n    var focusinSupported = \"onfocusin\" in window,\r\n        focus = { focus: \"focusin\", blur: \"focusout\" },\r\n        hover = { mouseenter: \"mouseover\", mouseleave: \"mouseout\" },\r\n        realEvent = function(type) {\r\n            return hover[type] || (focusinSupported && focus[type]) || type;\r\n        };\r\n\r\n    var    EventBindings = langx.klass({\r\n        init: function(target, event) {\r\n            this._target = target;\r\n            this._event = event;\r\n            this._bindings = [];\r\n        },\r\n\r\n        add: function(fn, options) {\r\n            var bindings = this._bindings,\r\n                binding = {\r\n                    fn: fn,\r\n                    options: langx.mixin({}, options)\r\n                };\r\n\r\n            bindings.push(binding);\r\n\r\n            var self = this;\r\n            if (!self._listener) {\r\n                self._listener = function(domEvt) {\r\n                    var elm = this,\r\n                        e = proxy(domEvt),\r\n                        args = domEvt._args,\r\n                        bindings = self._bindings,\r\n                        ns = e.namespace;\r\n\r\n                    if (langx.isDefined(args)) {\r\n                        args = [e].concat(args);\r\n                    } else {\r\n                        args = [e];\r\n                    }\r\n\r\n                    e.type = self._event; // convert realEvent to listened event\r\n\r\n                    langx.each(bindings, function(idx, binding) {\r\n                        var match = elm;\r\n                        if (e.isImmediatePropagationStopped && e.isImmediatePropagationStopped()) {\r\n                            return false;\r\n                        }\r\n                        var fn = binding.fn,\r\n                            options = binding.options || {},\r\n                            selector = options.selector,\r\n                            one = options.one,\r\n                            data = options.data;\r\n\r\n                        if (ns && ns != options.ns && options.ns.indexOf(ns) === -1) {\r\n                            return;\r\n                        }\r\n                        if (selector) {\r\n                            match = finder.closest(e.target, selector);\r\n                            if (match && match !== elm) {\r\n                                langx.mixin(e, {\r\n                                    currentTarget: match,\r\n                                    liveFired: elm\r\n                                });\r\n                            } else {\r\n                                return;\r\n                            }\r\n                        }\r\n\r\n                        var originalEvent = self._event;\r\n                        if (originalEvent in hover) {\r\n                            var related = e.relatedTarget;\r\n                            if (related && (related === match || noder.contains(match, related))) {\r\n                                return;\r\n                            }\r\n                        }\r\n\r\n                        if (langx.isDefined(data)) {\r\n                            e.data = data;\r\n                        }\r\n\r\n                        if (one) {\r\n                            self.remove(fn, options);\r\n                        }\r\n\r\n                        var result ;\r\n                        if (fn.handleEvent) {\r\n                            result = fn.handleEvent.apply(fn,args);\r\n                        } else {\r\n                            if (options.ctx) {\r\n                                result = fn.apply(options.ctx, args);                                   \r\n                            } else {\r\n                                result = fn.apply(match, args);                                   \r\n                            }\r\n                        }\r\n\r\n                        if (result === false) {\r\n                            e.preventDefault();\r\n                            e.stopPropagation();\r\n                        }\r\n                    });;\r\n                };\r\n\r\n                var event = self._event;\r\n                /*\r\n                                    if (event in hover) {\r\n                                        var l = self._listener;\r\n                                        self._listener = function(e) {\r\n                                            var related = e.relatedTarget;\r\n                                            if (!related || (related !== this && !noder.contains(this, related))) {\r\n                                                return l.apply(this, arguments);\r\n                                            }\r\n                                        }\r\n                                    }\r\n                */\r\n\r\n                if (self._target.addEventListener) {\r\n                    self._target.addEventListener(realEvent(event), self._listener, false);\r\n                } else {\r\n                    console.warn(\"invalid eventer object\", self._target);\r\n                }\r\n            }\r\n\r\n        },\r\n        remove: function(fn, options) {\r\n            options = langx.mixin({}, options);\r\n\r\n            function matcherFor(ns) {\r\n                return new RegExp(\"(?:^| )\" + ns.replace(\" \", \" .* ?\") + \"(?: |$)\");\r\n            }\r\n            var matcher;\r\n            if (options.ns) {\r\n                matcher = matcherFor(options.ns);\r\n            }\r\n\r\n            this._bindings = this._bindings.filter(function(binding) {\r\n                var removing = (!fn || fn === binding.fn) &&\r\n                    (!matcher || matcher.test(binding.options.ns)) &&\r\n                    (!options.selector || options.selector == binding.options.selector);\r\n\r\n                return !removing;\r\n            });\r\n            if (this._bindings.length == 0) {\r\n                if (this._target.removeEventListener) {\r\n                    this._target.removeEventListener(realEvent(this._event), this._listener, false);\r\n                }\r\n                this._listener = null;\r\n            }\r\n        }\r\n    });\r\n\r\n    return eventer.EventBindings = EventBindings;\r\n});\ndefine('skylark-domx-eventer/special-events',[\r\n\t\"skylark-langx\",\r\n    \"skylark-domx-browser\",\r\n\t\"./eventer\"\r\n],function(langx,browser,eventer){\r\n\r\n    var  specialEvents = {};\r\n\r\n    if (browser.support.transition) {\r\n        specialEvents.transitionEnd = {\r\n//          handle: function (e) {\r\n//            if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)\r\n//          },\r\n          bindType: browser.support.transition.end,\r\n          delegateType: browser.support.transition.end\r\n        }        \r\n    }\r\n\r\n\r\n    return eventer.specialEvents = specialEvents;\r\n});\ndefine('skylark-domx-eventer/parse',[],function(){\r\n    function parse(event) {\r\n        if (event) {\r\n            var segs = (\"\" + event).split(\".\");\r\n            return {\r\n                type: segs[0],\r\n                ns: segs.slice(1).sort().join(\" \")\r\n            };\r\n        } else {\r\n            return {\r\n                type : null,\r\n                ns : null\r\n            }\r\n        }\r\n    }\r\n\r\n    return parse;\t\r\n});\ndefine('skylark-domx-eventer/events-handler',[\r\n\t\"skylark-langx\",\r\n\t\"./eventer\",\r\n    \"./event-bindings\",\r\n    \"./special-events\",\r\n    \"./parse\"\r\n],function(langx,eventer,EventBindings,specialEvents,parse){\r\n    var    EventsHandler = langx.klass({\r\n        init: function(elm) {\r\n            this._target = elm;\r\n            this._handler = {};\r\n        },\r\n\r\n        // add a event listener\r\n        // selector Optional\r\n        register: function(event, callback, options) {\r\n            // Seperate the event from the namespace\r\n            var parsed = parse(event),\r\n                event = parsed.type,\r\n                specialEvent = specialEvents[event],\r\n                bindingEvent = specialEvent && (specialEvent.bindType || specialEvent.bindEventName);\r\n\r\n            var events = this._handler;\r\n\r\n            // Check if there is already a handler for this event\r\n            if (events[event] === undefined) {\r\n                events[event] = new EventBindings(this._target, bindingEvent || event);\r\n            }\r\n\r\n            // Register the new callback function\r\n            events[event].add(callback, langx.mixin({\r\n                ns: parsed.ns\r\n            }, options)); // options:{selector:xxx}\r\n        },\r\n\r\n        // remove a event listener\r\n        unregister: function(event, fn, options) {\r\n            // Check for parameter validtiy\r\n            var events = this._handler,\r\n                parsed = parse(event);\r\n            event = parsed.type;\r\n\r\n            if (event) {\r\n                var listener = events[event];\r\n\r\n                if (listener) {\r\n                    listener.remove(fn, langx.mixin({\r\n                        ns: parsed.ns\r\n                    }, options));\r\n                }\r\n            } else {\r\n                //remove all events\r\n                for (event in events) {\r\n                    var listener = events[event];\r\n                    listener.remove(fn, langx.mixin({\r\n                        ns: parsed.ns\r\n                    }, options));\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n\r\n    return eventer.EventsHandler = EventsHandler;\r\n});\ndefine('skylark-domx-eventer/find-handler',[\r\n\t\"skylark-langx\",\r\n\t\"./eventer\",\r\n    \"./events-handler\"\r\n],function(langx,eventer,EventsHandler){\r\n    var handlers = {};\r\n\r\n    function findHandler(elm) {\r\n        var id = langx.uid(elm),\r\n            handler = handlers[id];\r\n        if (!handler) {\r\n            handler = handlers[id] = new EventsHandler(elm);\r\n        }\r\n        return handler;\r\n    };\r\n\r\n\r\n    return eventer.findHandler = findHandler;\r\n});\ndefine('skylark-domx-eventer/clear',[\r\n\t\"skylark-langx\",\r\n\t\"./eventer\",\r\n    \"./find-handler\"\r\n],function(langx,eventer,findHandler){\r\n\r\n    /*   \r\n     * Remove all event handlers from the specified element.\r\n     * @param {HTMLElement} elm  \r\n     */\r\n    function clear(elm) {\r\n        var handler = findHandler(elm);\r\n\r\n        handler.unregister();\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    return eventer.clear = clear;\r\n});\ndefine('skylark-domx-eventer/native-event-ctors',[\r\n\t\"skylark-langx\",\r\n\t\"./eventer\"\r\n],function(langx,eventer){\r\n\r\n    var NativeEventCtors = [\r\n            window[\"CustomEvent\"], // 0 default\r\n            window[\"CompositionEvent\"], // 1\r\n            window[\"DragEvent\"], // 2\r\n            window[\"Event\"], // 3\r\n            window[\"FocusEvent\"], // 4\r\n            window[\"KeyboardEvent\"], // 5\r\n            window[\"MessageEvent\"], // 6\r\n            window[\"MouseEvent\"], // 7\r\n            window[\"MouseScrollEvent\"], // 8\r\n            window[\"MouseWheelEvent\"], // 9\r\n            window[\"MutationEvent\"], // 10\r\n            window[\"ProgressEvent\"], // 11\r\n            window[\"TextEvent\"], // 12\r\n            window[\"TouchEvent\"], // 13\r\n            window[\"UIEvent\"], // 14\r\n            window[\"WheelEvent\"], // 15\r\n            window[\"ClipboardEvent\"] // 16\r\n        ];\r\n\r\n\r\n    return eventer.NativeEventCtors = NativeEventCtors;\r\n});\ndefine('skylark-domx-eventer/native-events',[\r\n\t\"skylark-langx\",\r\n\t\"./eventer\"\r\n],function(langx,eventer){\r\n\r\n    var NativeEvents = {\r\n            \"compositionstart\": 1, // CompositionEvent\r\n            \"compositionend\": 1, // CompositionEvent\r\n            \"compositionupdate\": 1, // CompositionEvent\r\n\r\n            \"beforecopy\": 16, // ClipboardEvent\r\n            \"beforecut\": 16, // ClipboardEvent\r\n            \"beforepaste\": 16, // ClipboardEvent\r\n            \"copy\": 16, // ClipboardEvent\r\n            \"cut\": 16, // ClipboardEvent\r\n            \"paste\": 16, // ClipboardEvent\r\n\r\n            \"drag\": 2, // DragEvent\r\n            \"dragend\": 2, // DragEvent\r\n            \"dragenter\": 2, // DragEvent\r\n            \"dragexit\": 2, // DragEvent\r\n            \"dragleave\": 2, // DragEvent\r\n            \"dragover\": 2, // DragEvent\r\n            \"dragstart\": 2, // DragEvent\r\n            \"drop\": 2, // DragEvent\r\n\r\n            \"abort\": 3, // Event\r\n            \"change\": 3, // Event\r\n            \"error\": 3, // Event\r\n            \"selectionchange\": 3, // Event\r\n            \"submit\": 3, // Event\r\n            \"reset\": 3, // Event\r\n            'fullscreenchange':3,\r\n            'fullscreenerror':3,\r\n\r\n/*\r\n            'disablepictureinpicturechanged':3,\r\n            'ended':3,\r\n            'enterpictureinpicture':3,\r\n            'durationchange':3,\r\n            'leavepictureinpicture':3,\r\n            'loadstart' : 3,\r\n            'loadedmetadata':3,\r\n            'pause' : 3,\r\n            'play':3,\r\n            'posterchange':3,\r\n            'ratechange':3,\r\n            'seeking' : 3,\r\n            'sourceset':3,\r\n            'suspend':3,\r\n            'textdata':3,\r\n            'texttrackchange':3,\r\n            'timeupdate':3,\r\n            'volumechange':3,\r\n            'waiting' : 3,\r\n*/\r\n\r\n\r\n            \"focus\": 4, // FocusEvent\r\n            \"blur\": 4, // FocusEvent\r\n            \"focusin\": 4, // FocusEvent\r\n            \"focusout\": 4, // FocusEvent\r\n\r\n            \"keydown\": 5, // KeyboardEvent\r\n            \"keypress\": 5, // KeyboardEvent\r\n            \"keyup\": 5, // KeyboardEvent\r\n\r\n            \"message\": 6, // MessageEvent\r\n\r\n            \"click\": 7, // MouseEvent\r\n            \"contextmenu\": 7, // MouseEvent\r\n            \"dblclick\": 7, // MouseEvent\r\n            \"mousedown\": 7, // MouseEvent\r\n            \"mouseup\": 7, // MouseEvent\r\n            \"mousemove\": 7, // MouseEvent\r\n            \"mouseover\": 7, // MouseEvent\r\n            \"mouseout\": 7, // MouseEvent\r\n            \"mouseenter\": 7, // MouseEvent\r\n            \"mouseleave\": 7, // MouseEvent\r\n\r\n\r\n            \"progress\" : 11, //ProgressEvent\r\n\r\n            \"textInput\": 12, // TextEvent\r\n\r\n            \"tap\": 13,\r\n            \"touchstart\": 13, // TouchEvent\r\n            \"touchmove\": 13, // TouchEvent\r\n            \"touchend\": 13, // TouchEvent\r\n\r\n            \"load\": 14, // UIEvent\r\n            \"resize\": 14, // UIEvent\r\n            \"select\": 14, // UIEvent\r\n            \"scroll\": 14, // UIEvent\r\n            \"unload\": 14, // UIEvent,\r\n\r\n            \"wheel\": 15, // WheelEvent\r\n\r\n\r\n\r\n        };\r\n\r\n\r\n    return eventer.NativeEvents = NativeEvents;\r\n});\ndefine('skylark-domx-eventer/create',[\r\n\t\"skylark-langx\",\r\n\t\"./eventer\",\r\n    \"./native-event-ctors\",\r\n    \"./native-events\",\r\n    \"./parse\",\r\n    \"./compatible\"\r\n],function(langx,eventer,NativeEventCtors,NativeEvents,parse,compatible){\r\n\r\n    //create a custom dom event\r\n    var createEvent = (function() {\r\n\r\n        function getEventCtor(type) {\r\n            var idx = NativeEvents[type];\r\n            if (!idx) {\r\n                idx = 0;\r\n            }\r\n            return NativeEventCtors[idx];\r\n        }\r\n\r\n        return function(type, props) {\r\n            //create a custom dom event\r\n\r\n            if (langx.isString(type)) {\r\n                props = props || {};\r\n            } else {\r\n                props = type || {};\r\n                type = props.type || \"\";\r\n            }\r\n            var parsed = parse(type);\r\n            type = parsed.type;\r\n\r\n            props = langx.mixin({\r\n                bubbles: true,\r\n                cancelable: true\r\n            }, props);\r\n\r\n            if (parsed.ns) {\r\n                props.namespace = parsed.ns;\r\n            }\r\n\r\n            var ctor = getEventCtor(type),\r\n                e = new ctor(type, props);\r\n\r\n            langx.safeMixin(e, props);\r\n\r\n            return compatible(e);\r\n        };\r\n    })();\r\n\r\n    return eventer.create = createEvent;\r\n});\ndefine('skylark-domx-eventer/trigger',[\r\n\t\"skylark-langx\",\r\n\t\"./eventer\",\r\n    \"./create\"\r\n],function(langx,eventer,createEvent){\r\n\r\n    /*   \r\n     * Execute all handlers and behaviors attached to the matched elements for the given event  \r\n     * @param {String} evented\r\n     * @param {String} type\r\n     * @param {Array or PlainObject } args\r\n     */\r\n    function trigger(evented, type, args) {\r\n        var e;\r\n        if (type instanceof Event) {\r\n            e = type;\r\n        } else {\r\n            e = createEvent(type, args);\r\n        }\r\n        e._args = args;\r\n\r\n        var fn = (evented.dispatchEvent || evented.trigger);\r\n        if (fn) {\r\n            fn.call(evented, e);\r\n        } else {\r\n            console.warn(\"The evented parameter is not a eventable object\");\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n\r\n\r\n    return eventer.trigger = trigger;\r\n});\ndefine('skylark-domx-eventer/focused',[\r\n\t\"skylark-langx\",\r\n\t\"./eventer\",\r\n    \"./trigger\"\r\n],function(langx,eventer,trigger){\r\n\r\n    var focusedQueue = [],\r\n        focuser = langx.loop(function(){\r\n            for (var i = 0; i<focusedQueue.length; i++) {\r\n                trigger(focusedQueue[i],\"focused\");\r\n            }\r\n            focusedQueue = [];\r\n        });\r\n\r\n    focuser.start();\r\n\r\n\r\n    function focused(elm) {\r\n        if (!focusedQueue.includes(elm)) {\r\n            focusedQueue.push(elm)\r\n        }\r\n    }\r\n\r\n    return eventer.focused = focused;\r\n});\ndefine('skylark-domx-eventer/is-native-event',[\r\n\t\"skylark-langx\",\r\n\t\"./eventer\",\r\n    \"./native-events\"\r\n],function(langx,eventer,NativeEvents){\r\n    function isNativeEvent(events) {\r\n        if (langx.isString(events)) {\r\n            return !!NativeEvents[events];\r\n        } else if (langx.isArray(events)) {\r\n            for (var i=0; i<events.length; i++) {\r\n                if (NativeEvents[events]) {\r\n                    return false;\r\n                }\r\n            }\r\n            return events.length > 0;\r\n        }\r\n    }\r\n\r\n    return eventer.isNativeEvent = isNativeEvent;\r\n});\ndefine('skylark-domx-eventer/keys',[\r\n\t\"skylark-langx\",\r\n\t\"./eventer\"\r\n],function(langx,eventer){\r\n    var keyCodeLookup = {\r\n        \"backspace\": 8,\r\n        \"comma\": 188,\r\n        \"delete\": 46,\r\n        \"down\": 40,\r\n        \"end\": 35,\r\n        \"enter\": 13,\r\n        \"escape\": 27,\r\n        \"home\": 36,\r\n        \"left\": 37,\r\n        \"page_down\": 34,\r\n        \"page_up\": 33,\r\n        \"period\": 190,\r\n        \"right\": 39,\r\n        \"space\": 32,\r\n        \"tab\": 9,\r\n        \"up\": 38\r\n    };\r\n\r\n    return eventer.keys = keyCodeLookup;\r\n});\ndefine('skylark-domx-eventer/is-handler',[\r\n\t\"skylark-langx\",\r\n\t\"./eventer\"\r\n],function(langx,eventer){\r\n\r\n    function isHandler(callback) {\r\n        return callback && (langx.isFunction(callback) || langx.isFunction(callback.handleEvent));\r\n    }\r\n\r\n\r\n    return isHandler;\r\n});\ndefine('skylark-domx-eventer/off',[\r\n\t\"skylark-langx\",\r\n\t\"./eventer\",\r\n    \"./find-handler\",\r\n    \"./is-handler\"\r\n],function(langx,eventer,findHandler,isHandler){\r\n\r\n    /*   \r\n     * Remove an event handler for one or more events from the specified element.\r\n     * @param {HTMLElement} elm  \r\n     * @param {String} events\r\n     * @param {String　Optional } selector\r\n     * @param {Function} callback\r\n     */\r\n    function off(elm, events, selector, callback) {\r\n        var $this = this\r\n        if (langx.isPlainObject(events)) {\r\n            langx.each(events, function(type, fn) {\r\n                off(elm, type, selector, fn);\r\n            })\r\n            return $this;\r\n        }\r\n\r\n        if (!langx.isString(selector) && !isHandler(callback) && callback !== false) {\r\n            callback = selector;\r\n            selector = undefined;\r\n        }\r\n\r\n        if (callback === false) {\r\n            callback = langx.returnFalse;\r\n        }\r\n\r\n        if (typeof events == \"string\") {\r\n            if (events.indexOf(\",\") > -1) {\r\n                events = events.split(\",\");\r\n            } else {\r\n                events = events.split(/\\s/);\r\n            }\r\n        }\r\n\r\n        var handler = findHandler(elm);\r\n\r\n        if (events) events.forEach(function(event) {\r\n\r\n            handler.unregister(event, callback, {\r\n                selector: selector,\r\n            });\r\n        });\r\n        return this;\r\n    }\r\n\r\n    return eventer.off = off;\r\n});\ndefine('skylark-domx-eventer/on',[\r\n    \"skylark-langx\",\r\n    \"./eventer\",\r\n    \"./find-handler\",\r\n    \"./is-handler\"\r\n],function(langx,eventer,findHandler,isHandler){\r\n\r\n\r\n\r\n    /*   \r\n     * Attach an event handler function for one or more events to the selected elements.\r\n     * @param {HTMLElement} elm  \r\n     * @param {String} events\r\n     * @param {String　Optional} selector\r\n     * @param {Anything Optional} data\r\n     * @param {Function} callback\r\n     * @param {Boolean　Optional} one\r\n     */\r\n    function on(elm, events, selector, data, callback, ctx,one) {\r\n\r\n        var autoRemove, delegator;\r\n        if (langx.isPlainObject(events)) {\r\n            langx.each(events, function(type, fn) {\r\n                on(elm, type, selector, data, fn, one);\r\n            });\r\n            return this;\r\n        }\r\n\r\n        if (!langx.isString(selector) && !isHandler(callback)) {\r\n            one = ctx;\r\n            ctx = callback;\r\n            callback = data;\r\n            data = selector;\r\n            selector = undefined;\r\n        }\r\n\r\n        if (isHandler(data)) {\r\n            one = ctx;\r\n            ctx = callback;\r\n            callback = data;\r\n            data = undefined;\r\n        }\r\n\r\n        if (langx.isBoolean(ctx)) {\r\n            one = ctx;\r\n            ctx = undefined;\r\n        }\r\n        if (callback === false) {\r\n            callback = langx.returnFalse;\r\n        }\r\n\r\n        if (typeof events == \"string\") {\r\n            if (events.indexOf(\",\") > -1) {\r\n                events = events.split(\",\");\r\n            } else {\r\n                events = events.split(/\\s/);\r\n            }\r\n        }\r\n\r\n        var handler = findHandler(elm);\r\n\r\n        events.forEach(function(event) {\r\n            if (event == \"ready\") {\r\n                return ready(callback);\r\n            }\r\n            handler.register(event, callback, {\r\n                data: data,\r\n                selector: selector,\r\n                ctx : ctx,\r\n                one: !!one\r\n            });\r\n        });\r\n        return this;\r\n    }\r\n\r\n\r\n\r\n    return eventer.on = on;\r\n});\ndefine('skylark-domx-eventer/one',[\r\n\t\"skylark-langx\",\r\n\t\"./eventer\",\r\n    \"./on\"\r\n],function(langx,eventer,on){\r\n\r\n    /*   \r\n     * Attach a handler to an event for the elements. The handler is executed at most once per \r\n     * @param {HTMLElement} elm  \r\n     * @param {String} event\r\n     * @param {String　Optional} selector\r\n     * @param {Anything Optional} data\r\n     * @param {Function} callback\r\n     */\r\n    function one(...args) {\r\n        on(...args, true);\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    return eventer.one = one;\r\n});\ndefine('skylark-domx-eventer/ready',[\r\n\t\"skylark-langx\",\r\n\t\"./eventer\"\r\n],function(langx,eventer){\r\n    var   readyRE = /complete|loaded|interactive/;\r\n\r\n    /*   \r\n     * Specify a function to execute when the DOM is fully loaded.  \r\n     * @param {Function} callback\r\n     */\r\n    function ready(callback) {\r\n        // need to check if document.body exists for IE as that browser reports\r\n        // document ready when it hasn't yet created the body elm\r\n        if (readyRE.test(document.readyState) && document.body) {\r\n            langx.defer(callback);\r\n        } else {\r\n            document.addEventListener('DOMContentLoaded', callback, false);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    return eventer.ready = ready;\r\n});\ndefine('skylark-domx-eventer/resized',[\r\n\t\"skylark-langx\",\r\n\t\"./eventer\",\r\n    \"./trigger\"\r\n],function(langx,eventer,trigger){\r\n\r\n    var resizedQueue = [],\r\n        resizer = langx.loop(function(){\r\n            for (var i = 0; i<resizedQueue.length; i++) {\r\n                trigger(resizedQueue[i],\"resized\");\r\n            }\r\n            resizedQueue = [];\r\n        });\r\n\r\n    resizer.start();\r\n\r\n\r\n    function resized(elm) {\r\n        if (!resizedQueue.includes(elm)) {\r\n            resizedQueue.push(elm)\r\n        }\r\n    }\r\n\r\n    return eventer.resized = resized;\r\n});\ndefine('skylark-domx-eventer/shortcuts',[\r\n\t\"skylark-langx\",\r\n    \"skylark-domx-data\",\r\n\t\"./eventer\",\r\n    \"./keys\"\r\n],function(langx,datax,eventer,keyCodeLookup){\r\n\r\n    //example:\r\n    //shortcuts(elm).add(\"CTRL+ALT+SHIFT+X\",function(){console.log(\"test!\")});\r\n    function shortcuts(elm) {\r\n\r\n        var registry = datax.data(elm, \"shortcuts\");\r\n        if (!registry) {\r\n            registry = {};\r\n            datax.data(elm, \"shortcuts\", registry);\r\n            var run = function(shortcut, event) {\r\n                var n = event.metaKey || event.ctrlKey;\r\n                if (shortcut.ctrl == n && shortcut.alt == event.altKey && shortcut.shift == event.shiftKey) {\r\n                    if (event.keyCode == shortcut.keyCode || event.charCode && event.charCode == shortcut.charCode) {\r\n                        event.preventDefault();\r\n                        if (\"keydown\" == event.type) {\r\n                            shortcut.fn(event);\r\n                        }\r\n                        return true;\r\n                    }\r\n                }\r\n            };\r\n            on(elm, \"keyup keypress keydown\", function(event) {\r\n                if (!(/INPUT|TEXTAREA/.test(event.target.nodeName))) {\r\n                    for (var key in registry) {\r\n                        run(registry[key], event);\r\n                    }\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n        return {\r\n            add: function(pattern, fn) {\r\n                var shortcutKeys;\r\n                if (pattern.indexOf(\",\") > -1) {\r\n                    shortcutKeys = pattern.toLowerCase().split(\",\");\r\n                } else {\r\n                    shortcutKeys = pattern.toLowerCase().split(\" \");\r\n                }\r\n                shortcutKeys.forEach(function(shortcutKey) {\r\n                    var setting = {\r\n                        fn: fn,\r\n                        alt: false,\r\n                        ctrl: false,\r\n                        shift: false\r\n                    };\r\n                    shortcutKey.split(\"+\").forEach(function(key) {\r\n                        switch (key) {\r\n                            case \"alt\":\r\n                            case \"ctrl\":\r\n                            case \"shift\":\r\n                                setting[key] = true;\r\n                                break;\r\n                            default:\r\n                                setting.charCode = key.charCodeAt(0);\r\n                                setting.keyCode = keyCodeLookup[key] || key.toUpperCase().charCodeAt(0);\r\n                        }\r\n                    });\r\n                    var regKey = (setting.ctrl ? \"ctrl\" : \"\") + \",\" + (setting.alt ? \"alt\" : \"\") + \",\" + (setting.shift ? \"shift\" : \"\") + \",\" + setting.keyCode;\r\n                    registry[regKey] = setting;\r\n                })\r\n            }\r\n\r\n        };\r\n\r\n    }\r\n    return eventer.shortcuts = shortcuts;\r\n});\ndefine('skylark-domx-eventer/stop',[\r\n\t\"skylark-langx\",\r\n\t\"./eventer\"\r\n],function(langx,eventer){\r\n\r\n    /*   \r\n     * Prevents propagation and clobbers the default action of the passed event. The same as calling event.preventDefault() and event.stopPropagation(). \r\n     * @param {String} event\r\n     */\r\n    function stop(event) {\r\n        if (window.document.all) {\r\n            event.keyCode = 0;\r\n        }\r\n        if (event.preventDefault) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    return eventer.stop = stop;\r\n});\ndefine('skylark-domx-eventer/main',[\r\n    \"skylark-langx\",\r\n    \"skylark-domx-velm\",\r\n    \"skylark-domx-query\",\r\n    \"./eventer\",\r\n    \"./clear\",\r\n    \"./compatible\",\r\n    \"./event-bindings\",\r\n    \"./events-handler\",\r\n    \"./find-handler\",\r\n    \"./focused\",\r\n    \"./is-native-event\",\r\n    \"./keys\",\r\n    \"./native-event-ctors\",\r\n    \"./native-events\",\r\n    \"./off\",\r\n    \"./on\",\r\n    \"./one\",\r\n    \"./proxy\",\r\n    \"./ready\",\r\n    \"./resized\",    \r\n    \"./shortcuts\",\r\n    \"./special-events\",\r\n    \"./stop\",\r\n    \"./trigger\"\r\n],function(langx,velm,$,eventer){\r\n\r\n\r\n    langx.each(eventer.NativeEvents,function(name){\r\n        eventer[name] = function(elm,selector,data,callback) {\r\n            if (arguments.length>1) {\r\n                return eventer.on(elm,name,selector,data,callback);\r\n            } else {\r\n                if (name == \"focus\") {\r\n                    if (elm.focus) {\r\n                        elm.focus();\r\n                    }\r\n                } else if (name == \"blur\") {\r\n                    if (elm.blur) {\r\n                        elm.blur();\r\n                    }\r\n                } else if (name == \"click\") {\r\n                    if (elm.click) {\r\n                        elm.click();\r\n                    }\r\n                } else {\r\n                    eventer.trigger(elm,name);\r\n                }\r\n\r\n                return this;\r\n            }\r\n        };\r\n    });\r\n\r\n\r\n    var delegateMethodNames = [\r\n        \"off\",\r\n        \"on\",\r\n        \"one\",\r\n        \"trigger\"\r\n    ];\r\n\r\n    langx.each(eventer.NativeEvents,function(name){\r\n        delegateMethodNames.push(name);\r\n    });\r\n\r\n    // from ./eventer\r\n    velm.delegate(delegateMethodNames, eventer);\r\n\r\n    langx.each(delegateMethodNames,function(i,name){\r\n        $.fn[name] = $.wraps.wrapper_every_act(eventer[name],eventer);\r\n    });\r\n\r\n\r\n    /*\r\n    $.fn.on = $.wraps.wrapper_every_act(eventer.on, eventer);\r\n\r\n    $.fn.off = $.wraps.wrapper_every_act(eventer.off, eventer);\r\n\r\n    $.fn.trigger = $.wraps.wrapper_every_act(eventer.trigger, eventer);\r\n\r\n    ('focusin focusout focus blur load resize scroll unload click dblclick ' +\r\n        'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave ' +\r\n        'change select keydown keypress keyup error transitionEnd').split(' ').forEach(function(event) {\r\n        $.fn[event] = $.wraps.wrapper_every_act(eventer[event],eventer);\r\n    });\r\n\r\n    $.fn.one = function(event, selector, data, callback) {\r\n        if (!langx.isString(selector) && !langx.isFunction(callback)) {\r\n            callback = data;\r\n            data = selector;\r\n            selector = null;\r\n        }\r\n\r\n        if (langx.isFunction(data)) {\r\n            callback = data;\r\n            data = null;\r\n        }\r\n\r\n        return this.on(event, selector, data, callback, 1)\r\n    }; \r\n    */\r\n\r\n    $.ready = eventer.ready;\r\n\r\n    return eventer;\r\n});\ndefine('skylark-domx-eventer', ['skylark-domx-eventer/main'], function (main) { return main; });\n\n"]}